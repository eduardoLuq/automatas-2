/* Generated By:JavaCC: Do not edit this line. AnalizadorSintactico.java */
package  analizadorSintactico;

import simbolos.TablaDeSimbolos;
import simbolos.Variable;
import tiposDeDatos.TipoDeDato;
import tiposDeDatos.TiposDeDatos;

import java.io.InputStream;

public class AnalizadorSintactico implements AnalizadorSintacticoConstants {


    private static TablaDeSimbolos tablaDeSimbolos;

    public AnalizadorSintactico(TablaDeSimbolos tablaDeSimbolos,InputStream is){
        this(is);
        this.tablaDeSimbolos = tablaDeSimbolos;
    }

//------------ EMPIEZA ANALIZADOR SINTACTICO -------------------
  static final public void analizar() throws ParseException {
    jj_consume_token(MODIFICADOR);
    jj_consume_token(CLASE);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(CORCHETE_IZQ);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODIFICADOR:
      case SI:
      case MIENTTRAS:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      AS_expresion();
    }
    jj_consume_token(CORCHETE_DER);
  }

  static final public void AS_declaracion_de_variable() throws ParseException {
    Token token = null;
    Token tokenTipoDatos = null;
    Token tokenAlcance = null;
    Variable variable;
    tokenAlcance = jj_consume_token(MODIFICADOR);
    tokenTipoDatos = jj_consume_token(TIPO);
    token = jj_consume_token(IDENTIFICADOR);
        TipoDeDato tipoDeDato = TiposDeDatos.getTipoDeDato(tokenTipoDatos.image);
        CustomToken customToken = new CustomToken(token.image, token.beginLine,token.beginColumn,token.endLine,token.endColumn);
        variable = new Variable(customToken,token.image,tokenAlcance.image,tipoDeDato);
        tablaDeSimbolos.agregarIdentificador(variable);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNACION:
      AS_asignacion();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void AS_asignacion() throws ParseException {
    jj_consume_token(ASIGNACION);
    AS_expresion_matematica();
  }

  static final public void AS_expresion_asignacion() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    AS_asignacion();
  }

  static final public void AS_valor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case LITERAL:
      jj_consume_token(LITERAL);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void AS_expresion_matematica() throws ParseException {
    AS_Operando();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEGACION:
      case OPERADOR:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      AS_Operador();
      AS_Operando();
    }
  }

  static final public void AS_Operando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL:
    case IDENTIFICADOR:
      AS_valor();
      break;
    case PARENTESIS_IZQ:
      jj_consume_token(PARENTESIS_IZQ);
      AS_expresion_matematica();
      jj_consume_token(PARENTESIS_DER);
      break;
    case NEGACION:
    case OPERADOR_UNARIO:
      AS_operador_unario();
      AS_Operando();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void AS_Operador() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERADOR:
      jj_consume_token(OPERADOR);
      break;
    case NEGACION:
      jj_consume_token(NEGACION);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void AS_operador_unario() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERADOR_UNARIO:
      jj_consume_token(OPERADOR_UNARIO);
      break;
    case NEGACION:
      jj_consume_token(NEGACION);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void AS_expresion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODIFICADOR:
    case IDENTIFICADOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        AS_expresion_asignacion();
        break;
      case MODIFICADOR:
        AS_declaracion_de_variable();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PUNTO_Y_COMA);
      break;
    case SI:
    case MIENTTRAS:
      AS_expresiones_bloque();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void AS_expresiones_bloque() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SI:
      AS_expresion_si();
      break;
    case MIENTTRAS:
      AS_expresion_mientras();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void AS_expresion_si() throws ParseException {
    jj_consume_token(SI);
    jj_consume_token(PARENTESIS_IZQ);
    AS_expresion_matematica();
    jj_consume_token(PARENTESIS_DER);
    AS_bloque();
  }

  static final public void AS_expresion_mientras() throws ParseException {
    jj_consume_token(MIENTTRAS);
    jj_consume_token(PARENTESIS_IZQ);
    AS_expresion_matematica();
    jj_consume_token(PARENTESIS_DER);
    AS_bloque();
  }

  static final public void AS_bloque() throws ParseException {
    jj_consume_token(CORCHETE_IZQ);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODIFICADOR:
      case SI:
      case MIENTTRAS:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      AS_expresion();
    }
    jj_consume_token(CORCHETE_DER);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorSintacticoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000620,0x100000,0x21000000,0xc0000,0x21840800,0xc0000,0x840000,0x20000020,0x20000620,0x600,0x20000620,};
   }

  /** Constructor with InputStream. */
  public AnalizadorSintactico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorSintactico(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorSintacticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorSintactico(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorSintactico(AnalizadorSintacticoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorSintacticoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

/* Generated By:JavaCC: Do not edit this line. AnalizadorSemantico.java */
package  analizadorSemantico;

import expresiones.Expresion;
import expresiones.ExpresionAsignacion;
import expresiones.ManejadorExpresiones;
import expresiones.Nodo;
import operadores.Operadores;
import simbolos.Identificador;
import simbolos.Literal;
import simbolos.TablaDeSimbolos;
import tiposDeDatos.*;
import analizadorSintactico.CustomToken;

import java.io.InputStream;

public class AnalizadorSemantico implements AnalizadorSemanticoConstants {


    private static TablaDeSimbolos tablaDeSimbolos;

    public AnalizadorSemantico(TablaDeSimbolos tablaDeSimbolos,InputStream is){
        this(is);
        this.tablaDeSimbolos = tablaDeSimbolos;
    }

//------------ EMPIEZA ANALIZADOR SINTACTICO -------------------
  static final public void analizar() throws ParseException {
    jj_consume_token(MODIFICADOR);
    jj_consume_token(CLASE);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(CORCHETE_IZQ);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODIFICADOR:
      case SI:
      case MIENTTRAS:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      ASM_expresion();
    }
    jj_consume_token(CORCHETE_DER);
  }

  static final public void ASM_declaracion_de_variable() throws ParseException {
    Identificador identificador;
    Token token;
    Nodo res=null;
    jj_consume_token(MODIFICADOR);
    jj_consume_token(TIPO);
    token = jj_consume_token(IDENTIFICADOR);
        CustomToken customToken = new CustomToken(token.image, token.beginLine,token.beginColumn,token.endLine,token.endColumn);
        identificador = tablaDeSimbolos.obtenerIdentificador(customToken);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNACION:
      ASM_asignacion(identificador);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void ASM_asignacion(Identificador identificador) throws ParseException {
    Nodo nodo;
    Expresion expresion = new Expresion();
    jj_consume_token(ASIGNACION);
    ASM_expresion_matematica(expresion);
        ManejadorExpresiones.agregarExpresion(new ExpresionAsignacion(identificador,expresion));
  }

  static final public void ASM_expresion_asignacion() throws ParseException {
    Identificador identificador;
    Token token;
    Nodo res = null;
    token = jj_consume_token(IDENTIFICADOR);
        CustomToken customToken = new CustomToken(token.image, token.beginLine,token.beginColumn,token.endLine,token.endColumn);
        identificador = tablaDeSimbolos.obtenerIdentificador(customToken);
    ASM_asignacion(identificador);
  }

  static final public void ASM_valor(Expresion expresion) throws ParseException {
    Nodo nodo;
    Identificador identificador;
    Literal literal;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      identificador = ASM_buscar_variable();
     expresion.agregarNodo(identificador);
      break;
    case LITERAL_ENTERA:
    case LITERAL_BOOLEANA:
    case LITERAL_CADENA:
    case LITERAL_DOBLE:
      literal = ASM_literal();
     expresion.agregarNodo(literal);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Literal ASM_literal() throws ParseException {
    Token token;
    CustomToken customToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL_BOOLEANA:
      token = jj_consume_token(LITERAL_BOOLEANA);
       customToken = new CustomToken(token.image, token.beginLine,token.beginColumn,token.endLine,token.endColumn);
      {if (true) return new Literal(customToken,(new Booleano()).parseDato(token.image),new Booleano());}
      break;
    case LITERAL_ENTERA:
      token = jj_consume_token(LITERAL_ENTERA);
       customToken = new CustomToken(token.image, token.beginLine,token.beginColumn,token.endLine,token.endColumn);
      {if (true) return new Literal(customToken,(new Entero()).parseDato(token.image),new Entero());}
      break;
    case LITERAL_DOBLE:
      token = jj_consume_token(LITERAL_DOBLE);
       customToken = new CustomToken(token.image, token.beginLine,token.beginColumn,token.endLine,token.endColumn);
      {if (true) return new Literal(customToken,(new Doble()).parseDato(token.image),new Doble());}
      break;
    case LITERAL_CADENA:
      token = jj_consume_token(LITERAL_CADENA);
       customToken = new CustomToken(token.image, token.beginLine,token.beginColumn,token.endLine,token.endColumn);
      {if (true) return new Literal(customToken,(new Cadena()).parseDato(token.image),new Cadena());}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Identificador ASM_buscar_variable() throws ParseException {
    Token token;
    token = jj_consume_token(IDENTIFICADOR);
        CustomToken customToken = new CustomToken(token.image, token.beginLine,token.beginColumn,token.endLine,token.endColumn);
        {if (true) return tablaDeSimbolos.obtenerIdentificador(customToken);}
    throw new Error("Missing return statement in function");
  }

  static final public void ASM_expresion_matematica(Expresion expresion) throws ParseException {
    Nodo nodo;
    ASM_operando(expresion);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEGACION:
      case OPERADOR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      ASM_operador(expresion);
      ASM_operando(expresion);
    }
  }

  static final public void ASM_operador(Expresion expresion) throws ParseException {
    Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGACION:
      token = jj_consume_token(NEGACION);
      break;
    case OPERADOR:
      token = jj_consume_token(OPERADOR);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     expresion.agregarNodo(Operadores.getOperador(token.image));
  }

  static final public void ASM_operando(Expresion expresion) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LITERAL_ENTERA:
    case LITERAL_BOOLEANA:
    case LITERAL_CADENA:
    case LITERAL_DOBLE:
    case IDENTIFICADOR:
      ASM_valor(expresion);
      break;
    case PARENTESIS_IZQ:
      jj_consume_token(PARENTESIS_IZQ);
       expresion.aumentarPrecedencia(100);
      ASM_expresion_matematica(expresion);
       expresion.aumentarPrecedencia(-100);
      jj_consume_token(PARENTESIS_DER);
      break;
    case NEGACION:
    case OPERADOR_UNARIO:
      ASM_operador_unario(expresion);
      ASM_operando(expresion);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ASM_operador_unario(Expresion expresion) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERADOR_UNARIO:
      token = jj_consume_token(OPERADOR_UNARIO);
      break;
    case NEGACION:
      token = jj_consume_token(NEGACION);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   expresion.agregarNodo(Operadores.getOperadorUnario(token.image));
  }

  static final public void ASM_expresion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODIFICADOR:
    case IDENTIFICADOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        ASM_expresion_asignacion();
        break;
      case MODIFICADOR:
        ASM_declaracion_de_variable();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(PUNTO_Y_COMA);
      break;
    case SI:
    case MIENTTRAS:
      ASM_expresiones_bloque();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ASM_expresiones_bloque() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SI:
      ASM_expresion_si();
      break;
    case MIENTTRAS:
      ASM_expresion_mientras();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ASM_expresion_si() throws ParseException {
  Expresion expresion = new Expresion();
    jj_consume_token(SI);
    jj_consume_token(PARENTESIS_IZQ);
    ASM_expresion_matematica(expresion);
    jj_consume_token(PARENTESIS_DER);
    ASM_bloque();
  }

  static final public void ASM_expresion_mientras() throws ParseException {
  Expresion expresion = new Expresion();
    jj_consume_token(MIENTTRAS);
    jj_consume_token(PARENTESIS_IZQ);
    ASM_expresion_matematica(expresion);
    jj_consume_token(PARENTESIS_DER);
    ASM_bloque();
  }

  static final public void ASM_bloque() throws ParseException {
    jj_consume_token(CORCHETE_IZQ);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODIFICADOR:
      case SI:
      case MIENTTRAS:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      ASM_expresion();
    }
    jj_consume_token(CORCHETE_DER);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorSemanticoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000620,0x100000,0x1f000000,0xf000000,0xc0000,0xc0000,0x1f840800,0x840000,0x10000020,0x10000620,0x600,0x10000620,};
   }

  /** Constructor with InputStream. */
  public AnalizadorSemantico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorSemantico(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorSemanticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorSemantico(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSemanticoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorSemantico(AnalizadorSemanticoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorSemanticoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
